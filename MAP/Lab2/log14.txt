=============== ID = 1 ==============

ExecutionStack: [Ref(Int) v1, (Ref(Int) v2 ; (Ref(Int) v3 ; (Int cnt ; (New(v1, 2) ; (New(v2, 3) ; (New(v3, 4) ; (newBarrier(cnt, HeapRead(v2)) ; (fork((await(cnt) ; (WriteHeap{v1, HeapRead(v1) * 10} ; print(HeapRead(v1))))) ; (fork((await(cnt) ; (WriteHeap{v2, HeapRead(v2) * 10} ; (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2)))))) ; (await(cnt) ; print(HeapRead(v3))))))))))))]
Symbol Table:
Output: 
File Table:
Heap:
BarrierTable:
==============================

=============== ID = 1 ==============

ExecutionStack: [(Ref(Int) v2 ; (Ref(Int) v3 ; (Int cnt ; (New(v1, 2) ; (New(v2, 3) ; (New(v3, 4) ; (newBarrier(cnt, HeapRead(v2)) ; (fork((await(cnt) ; (WriteHeap{v1, HeapRead(v1) * 10} ; print(HeapRead(v1))))) ; (fork((await(cnt) ; (WriteHeap{v2, HeapRead(v2) * 10} ; (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2)))))) ; (await(cnt) ; print(HeapRead(v3))))))))))))]
Symbol Table:v1 -> Reference(0, Int) 
Output: 
File Table:
Heap:
BarrierTable:
==============================

=============== ID = 1 ==============

ExecutionStack: [Ref(Int) v2, (Ref(Int) v3 ; (Int cnt ; (New(v1, 2) ; (New(v2, 3) ; (New(v3, 4) ; (newBarrier(cnt, HeapRead(v2)) ; (fork((await(cnt) ; (WriteHeap{v1, HeapRead(v1) * 10} ; print(HeapRead(v1))))) ; (fork((await(cnt) ; (WriteHeap{v2, HeapRead(v2) * 10} ; (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2)))))) ; (await(cnt) ; print(HeapRead(v3)))))))))))]
Symbol Table:v1 -> Reference(0, Int) 
Output: 
File Table:
Heap:
BarrierTable:
==============================

=============== ID = 1 ==============

ExecutionStack: [(Ref(Int) v3 ; (Int cnt ; (New(v1, 2) ; (New(v2, 3) ; (New(v3, 4) ; (newBarrier(cnt, HeapRead(v2)) ; (fork((await(cnt) ; (WriteHeap{v1, HeapRead(v1) * 10} ; print(HeapRead(v1))))) ; (fork((await(cnt) ; (WriteHeap{v2, HeapRead(v2) * 10} ; (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2)))))) ; (await(cnt) ; print(HeapRead(v3)))))))))))]
Symbol Table:v1 -> Reference(0, Int) v2 -> Reference(0, Int) 
Output: 
File Table:
Heap:
BarrierTable:
==============================

=============== ID = 1 ==============

ExecutionStack: [Ref(Int) v3, (Int cnt ; (New(v1, 2) ; (New(v2, 3) ; (New(v3, 4) ; (newBarrier(cnt, HeapRead(v2)) ; (fork((await(cnt) ; (WriteHeap{v1, HeapRead(v1) * 10} ; print(HeapRead(v1))))) ; (fork((await(cnt) ; (WriteHeap{v2, HeapRead(v2) * 10} ; (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2)))))) ; (await(cnt) ; print(HeapRead(v3))))))))))]
Symbol Table:v1 -> Reference(0, Int) v2 -> Reference(0, Int) 
Output: 
File Table:
Heap:
BarrierTable:
==============================

=============== ID = 1 ==============

ExecutionStack: [(Int cnt ; (New(v1, 2) ; (New(v2, 3) ; (New(v3, 4) ; (newBarrier(cnt, HeapRead(v2)) ; (fork((await(cnt) ; (WriteHeap{v1, HeapRead(v1) * 10} ; print(HeapRead(v1))))) ; (fork((await(cnt) ; (WriteHeap{v2, HeapRead(v2) * 10} ; (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2)))))) ; (await(cnt) ; print(HeapRead(v3))))))))))]
Symbol Table:v1 -> Reference(0, Int) v2 -> Reference(0, Int) v3 -> Reference(0, Int) 
Output: 
File Table:
Heap:
BarrierTable:
==============================

=============== ID = 1 ==============

ExecutionStack: [Int cnt, (New(v1, 2) ; (New(v2, 3) ; (New(v3, 4) ; (newBarrier(cnt, HeapRead(v2)) ; (fork((await(cnt) ; (WriteHeap{v1, HeapRead(v1) * 10} ; print(HeapRead(v1))))) ; (fork((await(cnt) ; (WriteHeap{v2, HeapRead(v2) * 10} ; (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2)))))) ; (await(cnt) ; print(HeapRead(v3)))))))))]
Symbol Table:v1 -> Reference(0, Int) v2 -> Reference(0, Int) v3 -> Reference(0, Int) 
Output: 
File Table:
Heap:
BarrierTable:
==============================

=============== ID = 1 ==============

ExecutionStack: [(New(v1, 2) ; (New(v2, 3) ; (New(v3, 4) ; (newBarrier(cnt, HeapRead(v2)) ; (fork((await(cnt) ; (WriteHeap{v1, HeapRead(v1) * 10} ; print(HeapRead(v1))))) ; (fork((await(cnt) ; (WriteHeap{v2, HeapRead(v2) * 10} ; (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2)))))) ; (await(cnt) ; print(HeapRead(v3)))))))))]
Symbol Table:cnt -> 0 v1 -> Reference(0, Int) v2 -> Reference(0, Int) v3 -> Reference(0, Int) 
Output: 
File Table:
Heap:
BarrierTable:
==============================

=============== ID = 1 ==============

ExecutionStack: [New(v1, 2), (New(v2, 3) ; (New(v3, 4) ; (newBarrier(cnt, HeapRead(v2)) ; (fork((await(cnt) ; (WriteHeap{v1, HeapRead(v1) * 10} ; print(HeapRead(v1))))) ; (fork((await(cnt) ; (WriteHeap{v2, HeapRead(v2) * 10} ; (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2)))))) ; (await(cnt) ; print(HeapRead(v3))))))))]
Symbol Table:cnt -> 0 v1 -> Reference(0, Int) v2 -> Reference(0, Int) v3 -> Reference(0, Int) 
Output: 
File Table:
Heap:
BarrierTable:
==============================

=============== ID = 1 ==============

ExecutionStack: [(New(v2, 3) ; (New(v3, 4) ; (newBarrier(cnt, HeapRead(v2)) ; (fork((await(cnt) ; (WriteHeap{v1, HeapRead(v1) * 10} ; print(HeapRead(v1))))) ; (fork((await(cnt) ; (WriteHeap{v2, HeapRead(v2) * 10} ; (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2)))))) ; (await(cnt) ; print(HeapRead(v3))))))))]
Symbol Table:cnt -> 0 v1 -> Reference(0, Int) v2 -> Reference(0, Int) v3 -> Reference(0, Int) 
Output: 
File Table:
Heap:
0 -> 2
BarrierTable:
==============================

=============== ID = 1 ==============

ExecutionStack: [New(v2, 3), (New(v3, 4) ; (newBarrier(cnt, HeapRead(v2)) ; (fork((await(cnt) ; (WriteHeap{v1, HeapRead(v1) * 10} ; print(HeapRead(v1))))) ; (fork((await(cnt) ; (WriteHeap{v2, HeapRead(v2) * 10} ; (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2)))))) ; (await(cnt) ; print(HeapRead(v3)))))))]
Symbol Table:cnt -> 0 v1 -> Reference(0, Int) v2 -> Reference(0, Int) v3 -> Reference(0, Int) 
Output: 
File Table:
Heap:
0 -> 2
BarrierTable:
==============================

=============== ID = 1 ==============

ExecutionStack: [(New(v3, 4) ; (newBarrier(cnt, HeapRead(v2)) ; (fork((await(cnt) ; (WriteHeap{v1, HeapRead(v1) * 10} ; print(HeapRead(v1))))) ; (fork((await(cnt) ; (WriteHeap{v2, HeapRead(v2) * 10} ; (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2)))))) ; (await(cnt) ; print(HeapRead(v3)))))))]
Symbol Table:cnt -> 0 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(0, Int) 
Output: 
File Table:
Heap:
0 -> 2
1 -> 3
BarrierTable:
==============================

=============== ID = 1 ==============

ExecutionStack: [New(v3, 4), (newBarrier(cnt, HeapRead(v2)) ; (fork((await(cnt) ; (WriteHeap{v1, HeapRead(v1) * 10} ; print(HeapRead(v1))))) ; (fork((await(cnt) ; (WriteHeap{v2, HeapRead(v2) * 10} ; (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2)))))) ; (await(cnt) ; print(HeapRead(v3))))))]
Symbol Table:cnt -> 0 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(0, Int) 
Output: 
File Table:
Heap:
0 -> 2
1 -> 3
BarrierTable:
==============================

=============== ID = 1 ==============

ExecutionStack: [(newBarrier(cnt, HeapRead(v2)) ; (fork((await(cnt) ; (WriteHeap{v1, HeapRead(v1) * 10} ; print(HeapRead(v1))))) ; (fork((await(cnt) ; (WriteHeap{v2, HeapRead(v2) * 10} ; (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2)))))) ; (await(cnt) ; print(HeapRead(v3))))))]
Symbol Table:cnt -> 0 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 
File Table:
Heap:
0 -> 2
1 -> 3
2 -> 4
BarrierTable:
==============================

=============== ID = 1 ==============

ExecutionStack: [newBarrier(cnt, HeapRead(v2)), (fork((await(cnt) ; (WriteHeap{v1, HeapRead(v1) * 10} ; print(HeapRead(v1))))) ; (fork((await(cnt) ; (WriteHeap{v2, HeapRead(v2) * 10} ; (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2)))))) ; (await(cnt) ; print(HeapRead(v3)))))]
Symbol Table:cnt -> 0 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 
File Table:
Heap:
0 -> 2
1 -> 3
2 -> 4
BarrierTable:
==============================

=============== ID = 1 ==============

ExecutionStack: [(fork((await(cnt) ; (WriteHeap{v1, HeapRead(v1) * 10} ; print(HeapRead(v1))))) ; (fork((await(cnt) ; (WriteHeap{v2, HeapRead(v2) * 10} ; (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2)))))) ; (await(cnt) ; print(HeapRead(v3)))))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 
File Table:
Heap:
0 -> 2
1 -> 3
2 -> 4
BarrierTable:
1 -> (3, [])
==============================

=============== ID = 1 ==============

ExecutionStack: [fork((await(cnt) ; (WriteHeap{v1, HeapRead(v1) * 10} ; print(HeapRead(v1))))), (fork((await(cnt) ; (WriteHeap{v2, HeapRead(v2) * 10} ; (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2)))))) ; (await(cnt) ; print(HeapRead(v3))))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 
File Table:
Heap:
0 -> 2
1 -> 3
2 -> 4
BarrierTable:
1 -> (3, [])
==============================

=============== ID = 1 ==============

ExecutionStack: [(fork((await(cnt) ; (WriteHeap{v2, HeapRead(v2) * 10} ; (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2)))))) ; (await(cnt) ; print(HeapRead(v3))))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 
File Table:
Heap:
0 -> 2
1 -> 3
2 -> 4
BarrierTable:
1 -> (3, [])
==============================

=============== ID = 2 ==============

ExecutionStack: [(await(cnt) ; (WriteHeap{v1, HeapRead(v1) * 10} ; print(HeapRead(v1))))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 
File Table:
Heap:
0 -> 2
1 -> 3
2 -> 4
BarrierTable:
1 -> (3, [])
==============================

=============== ID = 1 ==============

ExecutionStack: [fork((await(cnt) ; (WriteHeap{v2, HeapRead(v2) * 10} ; (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2)))))), (await(cnt) ; print(HeapRead(v3)))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 
File Table:
Heap:
0 -> 2
1 -> 3
2 -> 4
BarrierTable:
1 -> (3, [])
==============================

=============== ID = 2 ==============

ExecutionStack: [await(cnt), (WriteHeap{v1, HeapRead(v1) * 10} ; print(HeapRead(v1)))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 
File Table:
Heap:
0 -> 2
1 -> 3
2 -> 4
BarrierTable:
1 -> (3, [])
==============================

=============== ID = 1 ==============

ExecutionStack: [(await(cnt) ; print(HeapRead(v3)))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 
File Table:
Heap:
0 -> 2
1 -> 3
2 -> 4
BarrierTable:
1 -> (3, [2])
==============================

=============== ID = 2 ==============

ExecutionStack: [await(cnt), (WriteHeap{v1, HeapRead(v1) * 10} ; print(HeapRead(v1)))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 
File Table:
Heap:
0 -> 2
1 -> 3
2 -> 4
BarrierTable:
1 -> (3, [2])
==============================

=============== ID = 3 ==============

ExecutionStack: [(await(cnt) ; (WriteHeap{v2, HeapRead(v2) * 10} ; (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2)))))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 
File Table:
Heap:
0 -> 2
1 -> 3
2 -> 4
BarrierTable:
1 -> (3, [2])
==============================

=============== ID = 1 ==============

ExecutionStack: [await(cnt), print(HeapRead(v3))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 
File Table:
Heap:
0 -> 2
1 -> 3
2 -> 4
BarrierTable:
1 -> (3, [2])
==============================

=============== ID = 2 ==============

ExecutionStack: [await(cnt), (WriteHeap{v1, HeapRead(v1) * 10} ; print(HeapRead(v1)))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 
File Table:
Heap:
0 -> 2
1 -> 3
2 -> 4
BarrierTable:
1 -> (3, [2])
==============================

=============== ID = 3 ==============

ExecutionStack: [await(cnt), (WriteHeap{v2, HeapRead(v2) * 10} ; (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2))))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 
File Table:
Heap:
0 -> 2
1 -> 3
2 -> 4
BarrierTable:
1 -> (3, [2])
==============================

=============== ID = 1 ==============

ExecutionStack: [await(cnt), print(HeapRead(v3))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 
File Table:
Heap:
0 -> 2
1 -> 3
2 -> 4
BarrierTable:
1 -> (3, [2, 1, 3])
==============================

=============== ID = 2 ==============

ExecutionStack: [await(cnt), (WriteHeap{v1, HeapRead(v1) * 10} ; print(HeapRead(v1)))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 
File Table:
Heap:
0 -> 2
1 -> 3
2 -> 4
BarrierTable:
1 -> (3, [2, 1, 3])
==============================

=============== ID = 3 ==============

ExecutionStack: [await(cnt), (WriteHeap{v2, HeapRead(v2) * 10} ; (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2))))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 
File Table:
Heap:
0 -> 2
1 -> 3
2 -> 4
BarrierTable:
1 -> (3, [2, 1, 3])
==============================

=============== ID = 1 ==============

ExecutionStack: [print(HeapRead(v3))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 
File Table:
Heap:
0 -> 2
1 -> 3
2 -> 4
BarrierTable:
1 -> (3, [2, 1, 3])
==============================

=============== ID = 2 ==============

ExecutionStack: [(WriteHeap{v1, HeapRead(v1) * 10} ; print(HeapRead(v1)))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 
File Table:
Heap:
0 -> 2
1 -> 3
2 -> 4
BarrierTable:
1 -> (3, [2, 1, 3])
==============================

=============== ID = 3 ==============

ExecutionStack: [(WriteHeap{v2, HeapRead(v2) * 10} ; (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2))))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 
File Table:
Heap:
0 -> 2
1 -> 3
2 -> 4
BarrierTable:
1 -> (3, [2, 1, 3])
==============================

=============== ID = 1 ==============

ExecutionStack:]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 4

File Table:
Heap:
0 -> 2
1 -> 3
2 -> 4
BarrierTable:
1 -> (3, [2, 1, 3])
==============================

=============== ID = 2 ==============

ExecutionStack: [WriteHeap{v1, HeapRead(v1) * 10}, print(HeapRead(v1))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 4

File Table:
Heap:
0 -> 2
1 -> 3
2 -> 4
BarrierTable:
1 -> (3, [2, 1, 3])
==============================

=============== ID = 3 ==============

ExecutionStack: [WriteHeap{v2, HeapRead(v2) * 10}, (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2)))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 4

File Table:
Heap:
0 -> 2
1 -> 3
2 -> 4
BarrierTable:
1 -> (3, [2, 1, 3])
==============================

=============== ID = 1 ==============

ExecutionStack:]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 4

File Table:
Heap:
0 -> 20
1 -> 30
2 -> 4
BarrierTable:
1 -> (3, [2, 1, 3])
==============================

=============== ID = 2 ==============

ExecutionStack: [print(HeapRead(v1))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 4

File Table:
Heap:
0 -> 20
1 -> 30
2 -> 4
BarrierTable:
1 -> (3, [2, 1, 3])
==============================

=============== ID = 3 ==============

ExecutionStack: [(WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2)))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 4

File Table:
Heap:
0 -> 20
1 -> 30
2 -> 4
BarrierTable:
1 -> (3, [2, 1, 3])
==============================

=============== ID = 1 ==============

ExecutionStack:]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 4
20

File Table:
Heap:
0 -> 20
1 -> 30
2 -> 4
BarrierTable:
1 -> (3, [2, 1, 3])
==============================

=============== ID = 2 ==============

ExecutionStack:]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 4
20

File Table:
Heap:
0 -> 20
1 -> 30
2 -> 4
BarrierTable:
1 -> (3, [2, 1, 3])
==============================

=============== ID = 3 ==============

ExecutionStack: [WriteHeap{v2, HeapRead(v2) * 10}, print(HeapRead(v2))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 4
20

File Table:
Heap:
0 -> 20
1 -> 30
2 -> 4
BarrierTable:
1 -> (3, [2, 1, 3])
==============================

=============== ID = 1 ==============

ExecutionStack:]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 4
20

File Table:
Heap:
0 -> 20
1 -> 300
2 -> 4
BarrierTable:
1 -> (3, [2, 1, 3])
==============================

=============== ID = 2 ==============

ExecutionStack:]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 4
20

File Table:
Heap:
0 -> 20
1 -> 300
2 -> 4
BarrierTable:
1 -> (3, [2, 1, 3])
==============================

=============== ID = 3 ==============

ExecutionStack: [print(HeapRead(v2))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 4
20

File Table:
Heap:
0 -> 20
1 -> 300
2 -> 4
BarrierTable:
1 -> (3, [2, 1, 3])
==============================

=============== ID = 1 ==============

ExecutionStack:]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 4
20
300

File Table:
Heap:
0 -> 20
1 -> 300
2 -> 4
BarrierTable:
1 -> (3, [2, 1, 3])
==============================

=============== ID = 2 ==============

ExecutionStack:]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 4
20
300

File Table:
Heap:
0 -> 20
1 -> 300
2 -> 4
BarrierTable:
1 -> (3, [2, 1, 3])
==============================

=============== ID = 3 ==============

ExecutionStack:]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 4
20
300

File Table:
Heap:
0 -> 20
1 -> 300
2 -> 4
BarrierTable:
1 -> (3, [2, 1, 3])
==============================

=============== ID = 1 ==============

ExecutionStack:]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 4
20
300

File Table:
Heap:
0 -> 20
1 -> 300
2 -> 4
BarrierTable:
1 -> (3, [2, 1, 3])
==============================

=============== ID = 2 ==============

ExecutionStack:]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 4
20
300

File Table:
Heap:
0 -> 20
1 -> 300
2 -> 4
BarrierTable:
1 -> (3, [2, 1, 3])
==============================

=============== ID = 3 ==============

ExecutionStack:]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 4
20
300

File Table:
Heap:
0 -> 20
1 -> 300
2 -> 4
BarrierTable:
1 -> (3, [2, 1, 3])
==============================

=============== ID = 1 ==============

ExecutionStack:]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 4
20
300

File Table:
Heap:
0 -> 20
1 -> 300
2 -> 4
BarrierTable:
1 -> (3, [2, 1, 3])
==============================

=============== ID = 2 ==============

ExecutionStack:]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 4
20
300

File Table:
Heap:
0 -> 20
1 -> 300
2 -> 4
BarrierTable:
1 -> (3, [2, 1, 3])
==============================

=============== ID = 3 ==============

ExecutionStack:]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 4
20
300

File Table:
Heap:
0 -> 20
1 -> 300
2 -> 4
BarrierTable:
1 -> (3, [2, 1, 3])
==============================

=============== ID = 1 ==============

ExecutionStack: [Ref(Int) v1, (Ref(Int) v2 ; (Ref(Int) v3 ; (Int cnt ; (New(v1, 2) ; (New(v2, 3) ; (New(v3, 4) ; (newBarrier(cnt, HeapRead(v2)) ; (fork((await(cnt) ; (WriteHeap{v1, HeapRead(v1) * 10} ; print(HeapRead(v1))))) ; (fork((await(cnt) ; (WriteHeap{v2, HeapRead(v2) * 10} ; (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2)))))) ; (await(cnt) ; print(HeapRead(v3))))))))))))]
Symbol Table:
Output: 
File Table:
Heap:
BarrierTable:
==============================

=============== ID = 1 ==============

ExecutionStack: [(Ref(Int) v2 ; (Ref(Int) v3 ; (Int cnt ; (New(v1, 2) ; (New(v2, 3) ; (New(v3, 4) ; (newBarrier(cnt, HeapRead(v2)) ; (fork((await(cnt) ; (WriteHeap{v1, HeapRead(v1) * 10} ; print(HeapRead(v1))))) ; (fork((await(cnt) ; (WriteHeap{v2, HeapRead(v2) * 10} ; (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2)))))) ; (await(cnt) ; print(HeapRead(v3))))))))))))]
Symbol Table:v1 -> Reference(0, Int) 
Output: 
File Table:
Heap:
BarrierTable:
==============================

=============== ID = 1 ==============

ExecutionStack: [Ref(Int) v2, (Ref(Int) v3 ; (Int cnt ; (New(v1, 2) ; (New(v2, 3) ; (New(v3, 4) ; (newBarrier(cnt, HeapRead(v2)) ; (fork((await(cnt) ; (WriteHeap{v1, HeapRead(v1) * 10} ; print(HeapRead(v1))))) ; (fork((await(cnt) ; (WriteHeap{v2, HeapRead(v2) * 10} ; (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2)))))) ; (await(cnt) ; print(HeapRead(v3)))))))))))]
Symbol Table:v1 -> Reference(0, Int) 
Output: 
File Table:
Heap:
BarrierTable:
==============================

=============== ID = 1 ==============

ExecutionStack: [(Ref(Int) v3 ; (Int cnt ; (New(v1, 2) ; (New(v2, 3) ; (New(v3, 4) ; (newBarrier(cnt, HeapRead(v2)) ; (fork((await(cnt) ; (WriteHeap{v1, HeapRead(v1) * 10} ; print(HeapRead(v1))))) ; (fork((await(cnt) ; (WriteHeap{v2, HeapRead(v2) * 10} ; (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2)))))) ; (await(cnt) ; print(HeapRead(v3)))))))))))]
Symbol Table:v1 -> Reference(0, Int) v2 -> Reference(0, Int) 
Output: 
File Table:
Heap:
BarrierTable:
==============================

=============== ID = 1 ==============

ExecutionStack: [Ref(Int) v3, (Int cnt ; (New(v1, 2) ; (New(v2, 3) ; (New(v3, 4) ; (newBarrier(cnt, HeapRead(v2)) ; (fork((await(cnt) ; (WriteHeap{v1, HeapRead(v1) * 10} ; print(HeapRead(v1))))) ; (fork((await(cnt) ; (WriteHeap{v2, HeapRead(v2) * 10} ; (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2)))))) ; (await(cnt) ; print(HeapRead(v3))))))))))]
Symbol Table:v1 -> Reference(0, Int) v2 -> Reference(0, Int) 
Output: 
File Table:
Heap:
BarrierTable:
==============================

=============== ID = 1 ==============

ExecutionStack: [(Int cnt ; (New(v1, 2) ; (New(v2, 3) ; (New(v3, 4) ; (newBarrier(cnt, HeapRead(v2)) ; (fork((await(cnt) ; (WriteHeap{v1, HeapRead(v1) * 10} ; print(HeapRead(v1))))) ; (fork((await(cnt) ; (WriteHeap{v2, HeapRead(v2) * 10} ; (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2)))))) ; (await(cnt) ; print(HeapRead(v3))))))))))]
Symbol Table:v1 -> Reference(0, Int) v2 -> Reference(0, Int) v3 -> Reference(0, Int) 
Output: 
File Table:
Heap:
BarrierTable:
==============================

=============== ID = 1 ==============

ExecutionStack: [Int cnt, (New(v1, 2) ; (New(v2, 3) ; (New(v3, 4) ; (newBarrier(cnt, HeapRead(v2)) ; (fork((await(cnt) ; (WriteHeap{v1, HeapRead(v1) * 10} ; print(HeapRead(v1))))) ; (fork((await(cnt) ; (WriteHeap{v2, HeapRead(v2) * 10} ; (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2)))))) ; (await(cnt) ; print(HeapRead(v3)))))))))]
Symbol Table:v1 -> Reference(0, Int) v2 -> Reference(0, Int) v3 -> Reference(0, Int) 
Output: 
File Table:
Heap:
BarrierTable:
==============================

=============== ID = 1 ==============

ExecutionStack: [(New(v1, 2) ; (New(v2, 3) ; (New(v3, 4) ; (newBarrier(cnt, HeapRead(v2)) ; (fork((await(cnt) ; (WriteHeap{v1, HeapRead(v1) * 10} ; print(HeapRead(v1))))) ; (fork((await(cnt) ; (WriteHeap{v2, HeapRead(v2) * 10} ; (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2)))))) ; (await(cnt) ; print(HeapRead(v3)))))))))]
Symbol Table:cnt -> 0 v1 -> Reference(0, Int) v2 -> Reference(0, Int) v3 -> Reference(0, Int) 
Output: 
File Table:
Heap:
BarrierTable:
==============================

=============== ID = 1 ==============

ExecutionStack: [New(v1, 2), (New(v2, 3) ; (New(v3, 4) ; (newBarrier(cnt, HeapRead(v2)) ; (fork((await(cnt) ; (WriteHeap{v1, HeapRead(v1) * 10} ; print(HeapRead(v1))))) ; (fork((await(cnt) ; (WriteHeap{v2, HeapRead(v2) * 10} ; (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2)))))) ; (await(cnt) ; print(HeapRead(v3))))))))]
Symbol Table:cnt -> 0 v1 -> Reference(0, Int) v2 -> Reference(0, Int) v3 -> Reference(0, Int) 
Output: 
File Table:
Heap:
BarrierTable:
==============================

=============== ID = 1 ==============

ExecutionStack: [(New(v2, 3) ; (New(v3, 4) ; (newBarrier(cnt, HeapRead(v2)) ; (fork((await(cnt) ; (WriteHeap{v1, HeapRead(v1) * 10} ; print(HeapRead(v1))))) ; (fork((await(cnt) ; (WriteHeap{v2, HeapRead(v2) * 10} ; (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2)))))) ; (await(cnt) ; print(HeapRead(v3))))))))]
Symbol Table:cnt -> 0 v1 -> Reference(0, Int) v2 -> Reference(0, Int) v3 -> Reference(0, Int) 
Output: 
File Table:
Heap:
0 -> 2
BarrierTable:
==============================

=============== ID = 1 ==============

ExecutionStack: [New(v2, 3), (New(v3, 4) ; (newBarrier(cnt, HeapRead(v2)) ; (fork((await(cnt) ; (WriteHeap{v1, HeapRead(v1) * 10} ; print(HeapRead(v1))))) ; (fork((await(cnt) ; (WriteHeap{v2, HeapRead(v2) * 10} ; (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2)))))) ; (await(cnt) ; print(HeapRead(v3)))))))]
Symbol Table:cnt -> 0 v1 -> Reference(0, Int) v2 -> Reference(0, Int) v3 -> Reference(0, Int) 
Output: 
File Table:
Heap:
0 -> 2
BarrierTable:
==============================

=============== ID = 1 ==============

ExecutionStack: [(New(v3, 4) ; (newBarrier(cnt, HeapRead(v2)) ; (fork((await(cnt) ; (WriteHeap{v1, HeapRead(v1) * 10} ; print(HeapRead(v1))))) ; (fork((await(cnt) ; (WriteHeap{v2, HeapRead(v2) * 10} ; (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2)))))) ; (await(cnt) ; print(HeapRead(v3)))))))]
Symbol Table:cnt -> 0 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(0, Int) 
Output: 
File Table:
Heap:
0 -> 2
1 -> 3
BarrierTable:
==============================

=============== ID = 1 ==============

ExecutionStack: [New(v3, 4), (newBarrier(cnt, HeapRead(v2)) ; (fork((await(cnt) ; (WriteHeap{v1, HeapRead(v1) * 10} ; print(HeapRead(v1))))) ; (fork((await(cnt) ; (WriteHeap{v2, HeapRead(v2) * 10} ; (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2)))))) ; (await(cnt) ; print(HeapRead(v3))))))]
Symbol Table:cnt -> 0 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(0, Int) 
Output: 
File Table:
Heap:
0 -> 2
1 -> 3
BarrierTable:
==============================

=============== ID = 1 ==============

ExecutionStack: [(newBarrier(cnt, HeapRead(v2)) ; (fork((await(cnt) ; (WriteHeap{v1, HeapRead(v1) * 10} ; print(HeapRead(v1))))) ; (fork((await(cnt) ; (WriteHeap{v2, HeapRead(v2) * 10} ; (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2)))))) ; (await(cnt) ; print(HeapRead(v3))))))]
Symbol Table:cnt -> 0 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 
File Table:
Heap:
0 -> 2
1 -> 3
2 -> 4
BarrierTable:
==============================

=============== ID = 1 ==============

ExecutionStack: [newBarrier(cnt, HeapRead(v2)), (fork((await(cnt) ; (WriteHeap{v1, HeapRead(v1) * 10} ; print(HeapRead(v1))))) ; (fork((await(cnt) ; (WriteHeap{v2, HeapRead(v2) * 10} ; (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2)))))) ; (await(cnt) ; print(HeapRead(v3)))))]
Symbol Table:cnt -> 0 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 
File Table:
Heap:
0 -> 2
1 -> 3
2 -> 4
BarrierTable:
==============================

=============== ID = 1 ==============

ExecutionStack: [(fork((await(cnt) ; (WriteHeap{v1, HeapRead(v1) * 10} ; print(HeapRead(v1))))) ; (fork((await(cnt) ; (WriteHeap{v2, HeapRead(v2) * 10} ; (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2)))))) ; (await(cnt) ; print(HeapRead(v3)))))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 
File Table:
Heap:
0 -> 2
1 -> 3
2 -> 4
BarrierTable:
1 -> (3, [])
==============================

=============== ID = 1 ==============

ExecutionStack: [fork((await(cnt) ; (WriteHeap{v1, HeapRead(v1) * 10} ; print(HeapRead(v1))))), (fork((await(cnt) ; (WriteHeap{v2, HeapRead(v2) * 10} ; (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2)))))) ; (await(cnt) ; print(HeapRead(v3))))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 
File Table:
Heap:
0 -> 2
1 -> 3
2 -> 4
BarrierTable:
1 -> (3, [])
==============================

=============== ID = 1 ==============

ExecutionStack: [(fork((await(cnt) ; (WriteHeap{v2, HeapRead(v2) * 10} ; (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2)))))) ; (await(cnt) ; print(HeapRead(v3))))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 
File Table:
Heap:
0 -> 2
1 -> 3
2 -> 4
BarrierTable:
1 -> (3, [])
==============================

=============== ID = 2 ==============

ExecutionStack: [(await(cnt) ; (WriteHeap{v1, HeapRead(v1) * 10} ; print(HeapRead(v1))))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 
File Table:
Heap:
0 -> 2
1 -> 3
2 -> 4
BarrierTable:
1 -> (3, [])
==============================

=============== ID = 1 ==============

ExecutionStack: [fork((await(cnt) ; (WriteHeap{v2, HeapRead(v2) * 10} ; (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2)))))), (await(cnt) ; print(HeapRead(v3)))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 
File Table:
Heap:
0 -> 2
1 -> 3
2 -> 4
BarrierTable:
1 -> (3, [])
==============================

=============== ID = 2 ==============

ExecutionStack: [await(cnt), (WriteHeap{v1, HeapRead(v1) * 10} ; print(HeapRead(v1)))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 
File Table:
Heap:
0 -> 2
1 -> 3
2 -> 4
BarrierTable:
1 -> (3, [])
==============================

=============== ID = 1 ==============

ExecutionStack: [(await(cnt) ; print(HeapRead(v3)))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 
File Table:
Heap:
0 -> 2
1 -> 3
2 -> 4
BarrierTable:
1 -> (3, [2])
==============================

=============== ID = 2 ==============

ExecutionStack: [await(cnt), (WriteHeap{v1, HeapRead(v1) * 10} ; print(HeapRead(v1)))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 
File Table:
Heap:
0 -> 2
1 -> 3
2 -> 4
BarrierTable:
1 -> (3, [2])
==============================

=============== ID = 3 ==============

ExecutionStack: [(await(cnt) ; (WriteHeap{v2, HeapRead(v2) * 10} ; (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2)))))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 
File Table:
Heap:
0 -> 2
1 -> 3
2 -> 4
BarrierTable:
1 -> (3, [2])
==============================

=============== ID = 1 ==============

ExecutionStack: [await(cnt), print(HeapRead(v3))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 
File Table:
Heap:
0 -> 2
1 -> 3
2 -> 4
BarrierTable:
1 -> (3, [2])
==============================

=============== ID = 2 ==============

ExecutionStack: [await(cnt), (WriteHeap{v1, HeapRead(v1) * 10} ; print(HeapRead(v1)))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 
File Table:
Heap:
0 -> 2
1 -> 3
2 -> 4
BarrierTable:
1 -> (3, [2])
==============================

=============== ID = 3 ==============

ExecutionStack: [await(cnt), (WriteHeap{v2, HeapRead(v2) * 10} ; (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2))))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 
File Table:
Heap:
0 -> 2
1 -> 3
2 -> 4
BarrierTable:
1 -> (3, [2])
==============================

=============== ID = 1 ==============

ExecutionStack: [await(cnt), print(HeapRead(v3))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 
File Table:
Heap:
0 -> 2
1 -> 3
2 -> 4
BarrierTable:
1 -> (3, [2, 1, 3])
==============================

=============== ID = 2 ==============

ExecutionStack: [(WriteHeap{v1, HeapRead(v1) * 10} ; print(HeapRead(v1)))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 
File Table:
Heap:
0 -> 2
1 -> 3
2 -> 4
BarrierTable:
1 -> (3, [2, 1, 3])
==============================

=============== ID = 3 ==============

ExecutionStack: [await(cnt), (WriteHeap{v2, HeapRead(v2) * 10} ; (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2))))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 
File Table:
Heap:
0 -> 2
1 -> 3
2 -> 4
BarrierTable:
1 -> (3, [2, 1, 3])
==============================

=============== ID = 1 ==============

ExecutionStack: [print(HeapRead(v3))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 
File Table:
Heap:
0 -> 2
1 -> 3
2 -> 4
BarrierTable:
1 -> (3, [2, 1, 3])
==============================

=============== ID = 2 ==============

ExecutionStack: [WriteHeap{v1, HeapRead(v1) * 10}, print(HeapRead(v1))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 
File Table:
Heap:
0 -> 2
1 -> 3
2 -> 4
BarrierTable:
1 -> (3, [2, 1, 3])
==============================

=============== ID = 3 ==============

ExecutionStack: [(WriteHeap{v2, HeapRead(v2) * 10} ; (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2))))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 
File Table:
Heap:
0 -> 2
1 -> 3
2 -> 4
BarrierTable:
1 -> (3, [2, 1, 3])
==============================

=============== ID = 1 ==============

ExecutionStack:]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 4

File Table:
Heap:
0 -> 20
1 -> 3
2 -> 4
BarrierTable:
1 -> (3, [2, 1, 3])
==============================

=============== ID = 2 ==============

ExecutionStack: [print(HeapRead(v1))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 4

File Table:
Heap:
0 -> 20
1 -> 3
2 -> 4
BarrierTable:
1 -> (3, [2, 1, 3])
==============================

=============== ID = 3 ==============

ExecutionStack: [WriteHeap{v2, HeapRead(v2) * 10}, (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2)))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 4

File Table:
Heap:
0 -> 20
1 -> 3
2 -> 4
BarrierTable:
1 -> (3, [2, 1, 3])
==============================

=============== ID = 1 ==============

ExecutionStack:]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 4
20

File Table:
Heap:
0 -> 20
1 -> 30
2 -> 4
BarrierTable:
1 -> (3, [2, 1, 3])
==============================

=============== ID = 2 ==============

ExecutionStack:]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 4
20

File Table:
Heap:
0 -> 20
1 -> 30
2 -> 4
BarrierTable:
1 -> (3, [2, 1, 3])
==============================

=============== ID = 3 ==============

ExecutionStack: [(WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2)))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 4
20

File Table:
Heap:
0 -> 20
1 -> 30
2 -> 4
BarrierTable:
1 -> (3, [2, 1, 3])
==============================

=============== ID = 1 ==============

ExecutionStack:]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 4
20

File Table:
Heap:
0 -> 20
1 -> 30
2 -> 4
BarrierTable:
1 -> (3, [2, 1, 3])
==============================

=============== ID = 2 ==============

ExecutionStack:]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 4
20

File Table:
Heap:
0 -> 20
1 -> 30
2 -> 4
BarrierTable:
1 -> (3, [2, 1, 3])
==============================

=============== ID = 3 ==============

ExecutionStack: [WriteHeap{v2, HeapRead(v2) * 10}, print(HeapRead(v2))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 4
20

File Table:
Heap:
0 -> 20
1 -> 30
2 -> 4
BarrierTable:
1 -> (3, [2, 1, 3])
==============================

=============== ID = 1 ==============

ExecutionStack:]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 4
20

File Table:
Heap:
0 -> 20
1 -> 300
2 -> 4
BarrierTable:
1 -> (3, [2, 1, 3])
==============================

=============== ID = 2 ==============

ExecutionStack:]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 4
20

File Table:
Heap:
0 -> 20
1 -> 300
2 -> 4
BarrierTable:
1 -> (3, [2, 1, 3])
==============================

=============== ID = 3 ==============

ExecutionStack: [print(HeapRead(v2))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 4
20

File Table:
Heap:
0 -> 20
1 -> 300
2 -> 4
BarrierTable:
1 -> (3, [2, 1, 3])
==============================

=============== ID = 1 ==============

ExecutionStack:]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 4
20
300

File Table:
Heap:
0 -> 20
1 -> 300
2 -> 4
BarrierTable:
1 -> (3, [2, 1, 3])
==============================

=============== ID = 2 ==============

ExecutionStack:]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 4
20
300

File Table:
Heap:
0 -> 20
1 -> 300
2 -> 4
BarrierTable:
1 -> (3, [2, 1, 3])
==============================

=============== ID = 3 ==============

ExecutionStack:]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 4
20
300

File Table:
Heap:
0 -> 20
1 -> 300
2 -> 4
BarrierTable:
1 -> (3, [2, 1, 3])
==============================

=============== ID = 1 ==============

ExecutionStack:]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 4
20
300

File Table:
Heap:
0 -> 20
1 -> 300
2 -> 4
BarrierTable:
1 -> (3, [2, 1, 3])
==============================

=============== ID = 2 ==============

ExecutionStack:]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 4
20
300

File Table:
Heap:
0 -> 20
1 -> 300
2 -> 4
BarrierTable:
1 -> (3, [2, 1, 3])
==============================

=============== ID = 3 ==============

ExecutionStack:]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 4
20
300

File Table:
Heap:
0 -> 20
1 -> 300
2 -> 4
BarrierTable:
1 -> (3, [2, 1, 3])
==============================

=============== ID = 1 ==============

ExecutionStack:]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 4
20
300

File Table:
Heap:
0 -> 20
1 -> 300
2 -> 4
BarrierTable:
1 -> (3, [2, 1, 3])
==============================

=============== ID = 2 ==============

ExecutionStack:]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 4
20
300

File Table:
Heap:
0 -> 20
1 -> 300
2 -> 4
BarrierTable:
1 -> (3, [2, 1, 3])
==============================

=============== ID = 3 ==============

ExecutionStack:]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 4
20
300

File Table:
Heap:
0 -> 20
1 -> 300
2 -> 4
BarrierTable:
1 -> (3, [2, 1, 3])
==============================

=============== ID = 1 ==============

ExecutionStack:]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 4
20
300

File Table:
Heap:
0 -> 20
1 -> 300
2 -> 4
BarrierTable:
1 -> (3, [2, 1, 3])
==============================

=============== ID = 2 ==============

ExecutionStack:]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 4
20
300

File Table:
Heap:
0 -> 20
1 -> 300
2 -> 4
BarrierTable:
1 -> (3, [2, 1, 3])
==============================

=============== ID = 3 ==============

ExecutionStack:]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 4
20
300

File Table:
Heap:
0 -> 20
1 -> 300
2 -> 4
BarrierTable:
1 -> (3, [2, 1, 3])
==============================

=============== ID = 1 ==============

ExecutionStack:]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 4
20
300

File Table:
Heap:
0 -> 20
1 -> 300
2 -> 4
BarrierTable:
1 -> (3, [2, 1, 3])
==============================

=============== ID = 2 ==============

ExecutionStack:]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 4
20
300

File Table:
Heap:
0 -> 20
1 -> 300
2 -> 4
BarrierTable:
1 -> (3, [2, 1, 3])
==============================

=============== ID = 3 ==============

ExecutionStack:]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 4
20
300

File Table:
Heap:
0 -> 20
1 -> 300
2 -> 4
BarrierTable:
1 -> (3, [2, 1, 3])
==============================

=============== ID = 5 ==============

ExecutionStack: [Ref(Int) v1, (Ref(Int) v2 ; (Ref(Int) v3 ; (Int cnt ; (New(v1, 2) ; (New(v2, 3) ; (New(v3, 4) ; (newBarrier(cnt, HeapRead(v2)) ; (fork((await(cnt) ; (WriteHeap{v1, HeapRead(v1) * 10} ; print(HeapRead(v1))))) ; (fork((await(cnt) ; (WriteHeap{v2, HeapRead(v2) * 10} ; (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2)))))) ; (await(cnt) ; print(HeapRead(v3))))))))))))]
Symbol Table:
Output: 
File Table:
Heap:
BarrierTable:
==============================

=============== ID = 5 ==============

ExecutionStack: [(Ref(Int) v2 ; (Ref(Int) v3 ; (Int cnt ; (New(v1, 2) ; (New(v2, 3) ; (New(v3, 4) ; (newBarrier(cnt, HeapRead(v2)) ; (fork((await(cnt) ; (WriteHeap{v1, HeapRead(v1) * 10} ; print(HeapRead(v1))))) ; (fork((await(cnt) ; (WriteHeap{v2, HeapRead(v2) * 10} ; (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2)))))) ; (await(cnt) ; print(HeapRead(v3))))))))))))]
Symbol Table:v1 -> Reference(0, Int) 
Output: 
File Table:
Heap:
BarrierTable:
==============================

=============== ID = 5 ==============

ExecutionStack: [Ref(Int) v2, (Ref(Int) v3 ; (Int cnt ; (New(v1, 2) ; (New(v2, 3) ; (New(v3, 4) ; (newBarrier(cnt, HeapRead(v2)) ; (fork((await(cnt) ; (WriteHeap{v1, HeapRead(v1) * 10} ; print(HeapRead(v1))))) ; (fork((await(cnt) ; (WriteHeap{v2, HeapRead(v2) * 10} ; (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2)))))) ; (await(cnt) ; print(HeapRead(v3)))))))))))]
Symbol Table:v1 -> Reference(0, Int) 
Output: 
File Table:
Heap:
BarrierTable:
==============================

=============== ID = 5 ==============

ExecutionStack: [(Ref(Int) v3 ; (Int cnt ; (New(v1, 2) ; (New(v2, 3) ; (New(v3, 4) ; (newBarrier(cnt, HeapRead(v2)) ; (fork((await(cnt) ; (WriteHeap{v1, HeapRead(v1) * 10} ; print(HeapRead(v1))))) ; (fork((await(cnt) ; (WriteHeap{v2, HeapRead(v2) * 10} ; (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2)))))) ; (await(cnt) ; print(HeapRead(v3)))))))))))]
Symbol Table:v1 -> Reference(0, Int) v2 -> Reference(0, Int) 
Output: 
File Table:
Heap:
BarrierTable:
==============================

=============== ID = 5 ==============

ExecutionStack: [Ref(Int) v3, (Int cnt ; (New(v1, 2) ; (New(v2, 3) ; (New(v3, 4) ; (newBarrier(cnt, HeapRead(v2)) ; (fork((await(cnt) ; (WriteHeap{v1, HeapRead(v1) * 10} ; print(HeapRead(v1))))) ; (fork((await(cnt) ; (WriteHeap{v2, HeapRead(v2) * 10} ; (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2)))))) ; (await(cnt) ; print(HeapRead(v3))))))))))]
Symbol Table:v1 -> Reference(0, Int) v2 -> Reference(0, Int) 
Output: 
File Table:
Heap:
BarrierTable:
==============================

=============== ID = 5 ==============

ExecutionStack: [(Int cnt ; (New(v1, 2) ; (New(v2, 3) ; (New(v3, 4) ; (newBarrier(cnt, HeapRead(v2)) ; (fork((await(cnt) ; (WriteHeap{v1, HeapRead(v1) * 10} ; print(HeapRead(v1))))) ; (fork((await(cnt) ; (WriteHeap{v2, HeapRead(v2) * 10} ; (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2)))))) ; (await(cnt) ; print(HeapRead(v3))))))))))]
Symbol Table:v1 -> Reference(0, Int) v2 -> Reference(0, Int) v3 -> Reference(0, Int) 
Output: 
File Table:
Heap:
BarrierTable:
==============================

=============== ID = 5 ==============

ExecutionStack: [Int cnt, (New(v1, 2) ; (New(v2, 3) ; (New(v3, 4) ; (newBarrier(cnt, HeapRead(v2)) ; (fork((await(cnt) ; (WriteHeap{v1, HeapRead(v1) * 10} ; print(HeapRead(v1))))) ; (fork((await(cnt) ; (WriteHeap{v2, HeapRead(v2) * 10} ; (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2)))))) ; (await(cnt) ; print(HeapRead(v3)))))))))]
Symbol Table:v1 -> Reference(0, Int) v2 -> Reference(0, Int) v3 -> Reference(0, Int) 
Output: 
File Table:
Heap:
BarrierTable:
==============================

=============== ID = 5 ==============

ExecutionStack: [(New(v1, 2) ; (New(v2, 3) ; (New(v3, 4) ; (newBarrier(cnt, HeapRead(v2)) ; (fork((await(cnt) ; (WriteHeap{v1, HeapRead(v1) * 10} ; print(HeapRead(v1))))) ; (fork((await(cnt) ; (WriteHeap{v2, HeapRead(v2) * 10} ; (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2)))))) ; (await(cnt) ; print(HeapRead(v3)))))))))]
Symbol Table:cnt -> 0 v1 -> Reference(0, Int) v2 -> Reference(0, Int) v3 -> Reference(0, Int) 
Output: 
File Table:
Heap:
BarrierTable:
==============================

=============== ID = 5 ==============

ExecutionStack: [New(v1, 2), (New(v2, 3) ; (New(v3, 4) ; (newBarrier(cnt, HeapRead(v2)) ; (fork((await(cnt) ; (WriteHeap{v1, HeapRead(v1) * 10} ; print(HeapRead(v1))))) ; (fork((await(cnt) ; (WriteHeap{v2, HeapRead(v2) * 10} ; (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2)))))) ; (await(cnt) ; print(HeapRead(v3))))))))]
Symbol Table:cnt -> 0 v1 -> Reference(0, Int) v2 -> Reference(0, Int) v3 -> Reference(0, Int) 
Output: 
File Table:
Heap:
BarrierTable:
==============================

=============== ID = 5 ==============

ExecutionStack: [(New(v2, 3) ; (New(v3, 4) ; (newBarrier(cnt, HeapRead(v2)) ; (fork((await(cnt) ; (WriteHeap{v1, HeapRead(v1) * 10} ; print(HeapRead(v1))))) ; (fork((await(cnt) ; (WriteHeap{v2, HeapRead(v2) * 10} ; (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2)))))) ; (await(cnt) ; print(HeapRead(v3))))))))]
Symbol Table:cnt -> 0 v1 -> Reference(0, Int) v2 -> Reference(0, Int) v3 -> Reference(0, Int) 
Output: 
File Table:
Heap:
0 -> 2
BarrierTable:
==============================

=============== ID = 5 ==============

ExecutionStack: [New(v2, 3), (New(v3, 4) ; (newBarrier(cnt, HeapRead(v2)) ; (fork((await(cnt) ; (WriteHeap{v1, HeapRead(v1) * 10} ; print(HeapRead(v1))))) ; (fork((await(cnt) ; (WriteHeap{v2, HeapRead(v2) * 10} ; (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2)))))) ; (await(cnt) ; print(HeapRead(v3)))))))]
Symbol Table:cnt -> 0 v1 -> Reference(0, Int) v2 -> Reference(0, Int) v3 -> Reference(0, Int) 
Output: 
File Table:
Heap:
0 -> 2
BarrierTable:
==============================

=============== ID = 5 ==============

ExecutionStack: [(New(v3, 4) ; (newBarrier(cnt, HeapRead(v2)) ; (fork((await(cnt) ; (WriteHeap{v1, HeapRead(v1) * 10} ; print(HeapRead(v1))))) ; (fork((await(cnt) ; (WriteHeap{v2, HeapRead(v2) * 10} ; (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2)))))) ; (await(cnt) ; print(HeapRead(v3)))))))]
Symbol Table:cnt -> 0 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(0, Int) 
Output: 
File Table:
Heap:
0 -> 2
1 -> 3
BarrierTable:
==============================

=============== ID = 5 ==============

ExecutionStack: [New(v3, 4), (newBarrier(cnt, HeapRead(v2)) ; (fork((await(cnt) ; (WriteHeap{v1, HeapRead(v1) * 10} ; print(HeapRead(v1))))) ; (fork((await(cnt) ; (WriteHeap{v2, HeapRead(v2) * 10} ; (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2)))))) ; (await(cnt) ; print(HeapRead(v3))))))]
Symbol Table:cnt -> 0 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(0, Int) 
Output: 
File Table:
Heap:
0 -> 2
1 -> 3
BarrierTable:
==============================

=============== ID = 5 ==============

ExecutionStack: [(newBarrier(cnt, HeapRead(v2)) ; (fork((await(cnt) ; (WriteHeap{v1, HeapRead(v1) * 10} ; print(HeapRead(v1))))) ; (fork((await(cnt) ; (WriteHeap{v2, HeapRead(v2) * 10} ; (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2)))))) ; (await(cnt) ; print(HeapRead(v3))))))]
Symbol Table:cnt -> 0 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 
File Table:
Heap:
0 -> 2
1 -> 3
2 -> 4
BarrierTable:
==============================

=============== ID = 5 ==============

ExecutionStack: [newBarrier(cnt, HeapRead(v2)), (fork((await(cnt) ; (WriteHeap{v1, HeapRead(v1) * 10} ; print(HeapRead(v1))))) ; (fork((await(cnt) ; (WriteHeap{v2, HeapRead(v2) * 10} ; (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2)))))) ; (await(cnt) ; print(HeapRead(v3)))))]
Symbol Table:cnt -> 0 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 
File Table:
Heap:
0 -> 2
1 -> 3
2 -> 4
BarrierTable:
==============================

=============== ID = 5 ==============

ExecutionStack: [(fork((await(cnt) ; (WriteHeap{v1, HeapRead(v1) * 10} ; print(HeapRead(v1))))) ; (fork((await(cnt) ; (WriteHeap{v2, HeapRead(v2) * 10} ; (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2)))))) ; (await(cnt) ; print(HeapRead(v3)))))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 
File Table:
Heap:
0 -> 2
1 -> 3
2 -> 4
BarrierTable:
1 -> (3, [])
==============================

=============== ID = 5 ==============

ExecutionStack: [fork((await(cnt) ; (WriteHeap{v1, HeapRead(v1) * 10} ; print(HeapRead(v1))))), (fork((await(cnt) ; (WriteHeap{v2, HeapRead(v2) * 10} ; (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2)))))) ; (await(cnt) ; print(HeapRead(v3))))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 
File Table:
Heap:
0 -> 2
1 -> 3
2 -> 4
BarrierTable:
1 -> (3, [])
==============================

=============== ID = 5 ==============

ExecutionStack: [(fork((await(cnt) ; (WriteHeap{v2, HeapRead(v2) * 10} ; (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2)))))) ; (await(cnt) ; print(HeapRead(v3))))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 
File Table:
Heap:
0 -> 2
1 -> 3
2 -> 4
BarrierTable:
1 -> (3, [])
==============================

=============== ID = 6 ==============

ExecutionStack: [(await(cnt) ; (WriteHeap{v1, HeapRead(v1) * 10} ; print(HeapRead(v1))))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 
File Table:
Heap:
0 -> 2
1 -> 3
2 -> 4
BarrierTable:
1 -> (3, [])
==============================

=============== ID = 5 ==============

ExecutionStack: [fork((await(cnt) ; (WriteHeap{v2, HeapRead(v2) * 10} ; (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2)))))), (await(cnt) ; print(HeapRead(v3)))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 
File Table:
Heap:
0 -> 2
1 -> 3
2 -> 4
BarrierTable:
1 -> (3, [])
==============================

=============== ID = 6 ==============

ExecutionStack: [await(cnt), (WriteHeap{v1, HeapRead(v1) * 10} ; print(HeapRead(v1)))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 
File Table:
Heap:
0 -> 2
1 -> 3
2 -> 4
BarrierTable:
1 -> (3, [])
==============================

=============== ID = 5 ==============

ExecutionStack: [(await(cnt) ; print(HeapRead(v3)))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 
File Table:
Heap:
0 -> 2
1 -> 3
2 -> 4
BarrierTable:
1 -> (3, [6])
==============================

=============== ID = 6 ==============

ExecutionStack: [await(cnt), (WriteHeap{v1, HeapRead(v1) * 10} ; print(HeapRead(v1)))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 
File Table:
Heap:
0 -> 2
1 -> 3
2 -> 4
BarrierTable:
1 -> (3, [6])
==============================

=============== ID = 7 ==============

ExecutionStack: [(await(cnt) ; (WriteHeap{v2, HeapRead(v2) * 10} ; (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2)))))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 
File Table:
Heap:
0 -> 2
1 -> 3
2 -> 4
BarrierTable:
1 -> (3, [6])
==============================

=============== ID = 5 ==============

ExecutionStack: [await(cnt), print(HeapRead(v3))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 
File Table:
Heap:
0 -> 2
1 -> 3
2 -> 4
BarrierTable:
1 -> (3, [6])
==============================

=============== ID = 6 ==============

ExecutionStack: [await(cnt), (WriteHeap{v1, HeapRead(v1) * 10} ; print(HeapRead(v1)))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 
File Table:
Heap:
0 -> 2
1 -> 3
2 -> 4
BarrierTable:
1 -> (3, [6])
==============================

=============== ID = 7 ==============

ExecutionStack: [await(cnt), (WriteHeap{v2, HeapRead(v2) * 10} ; (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2))))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 
File Table:
Heap:
0 -> 2
1 -> 3
2 -> 4
BarrierTable:
1 -> (3, [6])
==============================

=============== ID = 5 ==============

ExecutionStack: [await(cnt), print(HeapRead(v3))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 
File Table:
Heap:
0 -> 2
1 -> 3
2 -> 4
BarrierTable:
1 -> (3, [6, 5, 7])
==============================

=============== ID = 6 ==============

ExecutionStack: [await(cnt), (WriteHeap{v1, HeapRead(v1) * 10} ; print(HeapRead(v1)))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 
File Table:
Heap:
0 -> 2
1 -> 3
2 -> 4
BarrierTable:
1 -> (3, [6, 5, 7])
==============================

=============== ID = 7 ==============

ExecutionStack: [await(cnt), (WriteHeap{v2, HeapRead(v2) * 10} ; (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2))))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 
File Table:
Heap:
0 -> 2
1 -> 3
2 -> 4
BarrierTable:
1 -> (3, [6, 5, 7])
==============================

=============== ID = 5 ==============

ExecutionStack: [print(HeapRead(v3))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 
File Table:
Heap:
0 -> 2
1 -> 3
2 -> 4
BarrierTable:
1 -> (3, [6, 5, 7])
==============================

=============== ID = 6 ==============

ExecutionStack: [(WriteHeap{v1, HeapRead(v1) * 10} ; print(HeapRead(v1)))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 
File Table:
Heap:
0 -> 2
1 -> 3
2 -> 4
BarrierTable:
1 -> (3, [6, 5, 7])
==============================

=============== ID = 7 ==============

ExecutionStack: [(WriteHeap{v2, HeapRead(v2) * 10} ; (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2))))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 
File Table:
Heap:
0 -> 2
1 -> 3
2 -> 4
BarrierTable:
1 -> (3, [6, 5, 7])
==============================

=============== ID = 5 ==============

ExecutionStack:]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 4

File Table:
Heap:
0 -> 2
1 -> 3
2 -> 4
BarrierTable:
1 -> (3, [6, 5, 7])
==============================

=============== ID = 6 ==============

ExecutionStack: [WriteHeap{v1, HeapRead(v1) * 10}, print(HeapRead(v1))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 4

File Table:
Heap:
0 -> 2
1 -> 3
2 -> 4
BarrierTable:
1 -> (3, [6, 5, 7])
==============================

=============== ID = 7 ==============

ExecutionStack: [WriteHeap{v2, HeapRead(v2) * 10}, (WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2)))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 4

File Table:
Heap:
0 -> 2
1 -> 3
2 -> 4
BarrierTable:
1 -> (3, [6, 5, 7])
==============================

=============== ID = 5 ==============

ExecutionStack:]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 4

File Table:
Heap:
0 -> 20
1 -> 30
2 -> 4
BarrierTable:
1 -> (3, [6, 5, 7])
==============================

=============== ID = 6 ==============

ExecutionStack: [print(HeapRead(v1))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 4

File Table:
Heap:
0 -> 20
1 -> 30
2 -> 4
BarrierTable:
1 -> (3, [6, 5, 7])
==============================

=============== ID = 7 ==============

ExecutionStack: [(WriteHeap{v2, HeapRead(v2) * 10} ; print(HeapRead(v2)))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 4

File Table:
Heap:
0 -> 20
1 -> 30
2 -> 4
BarrierTable:
1 -> (3, [6, 5, 7])
==============================

=============== ID = 5 ==============

ExecutionStack:]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 4
20

File Table:
Heap:
0 -> 20
1 -> 30
2 -> 4
BarrierTable:
1 -> (3, [6, 5, 7])
==============================

=============== ID = 6 ==============

ExecutionStack:]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 4
20

File Table:
Heap:
0 -> 20
1 -> 30
2 -> 4
BarrierTable:
1 -> (3, [6, 5, 7])
==============================

=============== ID = 7 ==============

ExecutionStack: [WriteHeap{v2, HeapRead(v2) * 10}, print(HeapRead(v2))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 4
20

File Table:
Heap:
0 -> 20
1 -> 30
2 -> 4
BarrierTable:
1 -> (3, [6, 5, 7])
==============================

=============== ID = 5 ==============

ExecutionStack:]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 4
20

File Table:
Heap:
0 -> 20
1 -> 300
2 -> 4
BarrierTable:
1 -> (3, [6, 5, 7])
==============================

=============== ID = 6 ==============

ExecutionStack:]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 4
20

File Table:
Heap:
0 -> 20
1 -> 300
2 -> 4
BarrierTable:
1 -> (3, [6, 5, 7])
==============================

=============== ID = 7 ==============

ExecutionStack: [print(HeapRead(v2))]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 4
20

File Table:
Heap:
0 -> 20
1 -> 300
2 -> 4
BarrierTable:
1 -> (3, [6, 5, 7])
==============================

=============== ID = 5 ==============

ExecutionStack:]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 4
20
300

File Table:
Heap:
0 -> 20
1 -> 300
2 -> 4
BarrierTable:
1 -> (3, [6, 5, 7])
==============================

=============== ID = 6 ==============

ExecutionStack:]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 4
20
300

File Table:
Heap:
0 -> 20
1 -> 300
2 -> 4
BarrierTable:
1 -> (3, [6, 5, 7])
==============================

=============== ID = 7 ==============

ExecutionStack:]
Symbol Table:cnt -> 1 v1 -> Reference(0, Int) v2 -> Reference(1, Int) v3 -> Reference(2, Int) 
Output: 4
20
300

File Table:
Heap:
0 -> 20
1 -> 300
2 -> 4
BarrierTable:
1 -> (3, [6, 5, 7])
==============================

